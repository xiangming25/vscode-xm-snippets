{
  "function-component-typescript": {
    "prefix": "func",
		"body": [
			"import React, { FC, useEffect, useState } from 'react';",
"",
			"interface IProps {",
			"}",
"",
			"const ${TM_FILENAME_BASE: Index}$1: FC<IProps> = (props) => {",
			"	const [state, setState] = useState<string>();",
"",
			"	useEffect(() => {",
			"",
			"	}, []);",
"",
			"	return (",
			"		<div>",
			"			{state}",
			"		</div>",
			"	);",
			"};",
"",
			"export default ${TM_FILENAME_BASE: Index}$1;",

		],
		"description": "react component for typescript"
  },
		"function-component-javascript": {
			"prefix": "func",
			"body": [
				"import React, { useEffect, useState } from 'react';",
	"",
				"const ${TM_FILENAME_BASE: Index}$1 = () => {",
				"	const [state, setState] = useState('');",
	"",
				"	useEffect(() => {",
				"",
				"	}, []);",
	"",
				"	return (",
				"		<div>",
				"			{state}",
				"		</div>",
				"	);",
				"};",
	"",
				"export default ${TM_FILENAME_BASE: Index}$1;",
	
	"",
	
		],
		"description": "react component for javascript"
	},
	"reactComponent": {
		"prefix": "reactComponent",
		"body": [
			"import React, { Component } from 'react';",
			"import PropTypes from 'prop-types';",
"",
			"export default class $Index extends Component {",
			"	static propTypes = {};",
"",
			"	constructor(props) {",
			"		super(props);",
"",
			"		this.state = {",
"",
			"		};",
			"	}",
			"	static getDerivedStateFromProps(props, state) {}",
"",
			"	componentDidMount() {",
			"		// do something",
			"	}",
"",
			"	shouldComponentUpdate(nextProps, nextState) {}",
"",
			"	getSnapshotBeforeUpdate(prevProps, prevState) {}",
"",
			"	componentDidUpdate(prevProps, prevState, snapshot) {}",
"",
			"	componentWillUnmount() {",
			"		// do something",
			"	}",
"",
			"	render() {",
			"		return (",
			"			<div>这里是组件</div>",
			"		);",
			"	}",
			"}",
"",
		]
	}
}