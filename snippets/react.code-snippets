{
  "destructuring-hooks-props": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "dp",
		"body": [
			"const { $1 } = props"
		],
		"description": "解构 Hooks 的 props"
  },
  "destructuring-class-props": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "dpc",
		"body": [
			"const { $1 } = this.props"
		],
		"description": "解构 class 的 props "
  },
  "destructuring-class-state": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "dsc",
		"body": [
			"const { $1 } = this.state"
		],
		"description": "解构 class 的 state"
  },
  "destructuring-object": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "do",
		"body": [
			"const { ${2:value} } = ${1:objectName}"
		],
		"description": "解构对象"
  },
  "destructuring-array": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "da",
		"body": [
			"const [ ${2:value} ] = ${1:arrayName}"
		],
		"description": "解构对象"
  },
  "function-component-typescript": {
		"scope": "typescript,typescriptreact",
    "prefix": "func",
		"body": [
			"import React, { FC, useEffect, useState } from 'react';",
"",
			"interface IProps {}",
"",
			"const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}: FC<IProps> = (props) => {",
			"\tconst {} = props;",
"",
			"\tuseEffect(() => {}, []);",
"",
			"\treturn (",
			"\t\t<section>",
			"\t\t</section>",
			"\t);",
			"};",
"",
			"export default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}};",

		],
		"description": "react component for typescript"
  },
		"function-component-javascript": {
			"scope": "javascript,javascriptreact",
			"prefix": "func",
			"body": [
				"import React, { useEffect, useState } from 'react';",
"",
				"const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} = (props) => {",
				"\tconst {} = props;",
"",
				"\tuseEffect(() => {}, []);",
"",
				"\treturn (",
				"\t\t<section>",
				"\t\t</section>",
				"\t);",
				"};",
"",
	
		],
		"description": "react component for javascript"
	},
	"reactComponent": {
		"prefix": "reactComponent",
		"body": [
			"import React, { Component } from 'react';",
			"import PropTypes from 'prop-types';",
"",
			"export default class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends Component {",
			"\tstatic propTypes = {};",
"",
			"\tconstructor(props) {",
			"\t\tsuper(props);",
"",
			"\t\tthis.state = {",
"",
			"\t\t};",
			"\t}",
			"\tstatic getDerivedStateFromProps(props, state) {}",
"",
			"\tcomponentDidMount() {",
			"\t\t// do something",
			"\t}",
"",
			"\tcomponentWillUnmount() {",
			"\t\t// do something",
			"\t}",
"",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t<div>这里是组件</div>",
			"\t\t);",
			"\t}",
			"}",
"",
		]
	},
	"useEffect-xm-snippets": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "useEffect",
		"body": [
			"useEffect(() => {",
"\t$1",
			"}, []);",
		],
		"description": "react hooks useEffect"
	},
	"useCallback-xm-snippets": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "useCallback",
		"body": [
			"useCallback(() => {",
"\t$1",
			"}, []);",
		],
		"description": "react hooks useCallback"
	},
	"useMemo-xm-snippets": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "useMemo",
		"body": [
			"useMemo(() => {$1}, []);",
		],
		"description": "react hooks useMemo"
	},
	"useState-xm-snippets": {
		"scope": "javascript,javascriptreact",
		"prefix": "useState",
		"body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($0);",
		],
		"description": "react hooks useState"
	},
	"useState-xm-snippets-typescript": {
		"scope": "typescript,typescriptreact",
		"prefix": "useState",
		"body": [
			// setState首字母大写
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:any}>($0);"
		],
		"description": "react hooks useState"
	},
	"useRef-xm-snippets": {
		"scope": "javascript,javascriptreact",
		"prefix": "useRef",
		"body": [
			"const $1Ref = useRef($0);",
		],
		"description": "react hooks useRef"
	},
	"useRef-xm-snippets-typescript": {
		"scope": "typescript,typescriptreact",
		"prefix": "useRef",
		"body": [
			"const $1Ref = useRef<${2:any}>($0);",
		],
		"description": "react hooks useRef"
	},
	"useImperativeHandle-xm-snippets": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "useImperativeHandle",
		"body": [
			"useImperativeHandle(ref, () => ({",
			"\t$1",
			"}));",
		],
		"description": "react hooks useRef"
	},
}